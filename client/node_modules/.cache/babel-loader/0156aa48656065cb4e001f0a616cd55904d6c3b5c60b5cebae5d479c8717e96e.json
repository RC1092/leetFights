{"ast":null,"code":"var _jsxFileName = \"R:\\\\leetFights\\\\client\\\\src\\\\codeArea.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Editor from \"@monaco-editor/react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst files = {\n  \"script.py\": {\n    name: \"script.py\",\n    language: \"python3\",\n    value: \"Here is some python text\"\n  },\n  \"code.js\": {\n    name: \"code.js\",\n    language: \"javascript\",\n    value: \"Enter your javascript code\"\n  }\n};\nfunction EditArea(id, name) {\n  _s();\n  const [fileName, setFileName] = useState(\"script.py\"); // change to \"index.html\"\n  const editorRef = useRef(null);\n  const file = files[fileName];\n  // files[\"script.py\"] -> file -> name, language, value -> pass those to the editor\n\n  // it will take up the full width / height of its container (width: 100%, height: 100%)\n  // editors of any size\n  // full screen, embed type size\n\n  // 1. Be able to change from 1 file to the next\n  // 2. Get the value of the Monaco editor\n\n  // a file path (name), a language, a default value\n\n  function handleEditorDidMount(editor, monaco) {\n    editorRef.current = editor;\n  }\n  async function getEditorValue() {\n    const formData = {\n      text: editorRef.current.getValue(),\n      lang: files[fileName].language\n    };\n    console.log(JSON.stringify(formData));\n    try {\n      const response = await fetch('http://localhost:8000/solution/checkSol', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log('Data sent successfully');\n      } else {\n        console.error('Failed to send data');\n      }\n    } catch (error) {\n      console.error('Error sending data:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setFileName(\"script.py\"),\n      children: \"Switch to python\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setFileName(\"code.js\"),\n      children: \"Switch to javascript\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getEditorValue(),\n      children: \"Get Editor Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      height: \"80vh\",\n      width: \"100vh\",\n      theme: \"vs-dark\",\n      onMount: handleEditorDidMount,\n      path: file.name,\n      defaultLanguage: file.language,\n      defaultValue: file.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(EditArea, \"1uFTzcXOTOfx1S4xH3XE+F3DJHo=\");\n_c = EditArea;\nexport default EditArea;\nvar _c;\n$RefreshReg$(_c, \"EditArea\");","map":{"version":3,"names":["useState","useRef","BrowserRouter","Routes","Route","Editor","jsxDEV","_jsxDEV","files","name","language","value","EditArea","id","_s","fileName","setFileName","editorRef","file","handleEditorDidMount","editor","monaco","current","getEditorValue","formData","text","getValue","lang","console","log","JSON","stringify","response","fetch","method","headers","body","ok","error","className","children","onClick","_jsxFileName","lineNumber","columnNumber","height","width","theme","onMount","path","defaultLanguage","defaultValue","_c","$RefreshReg$"],"sources":["R:/leetFights/client/src/codeArea.js"],"sourcesContent":["import { useState, useRef } from 'react'\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport Editor from \"@monaco-editor/react\"\r\nimport './App.css'\r\n\r\nconst files = {\r\n  \"script.py\": {\r\n    name: \"script.py\",\r\n    language: \"python3\",\r\n    value: \"Here is some python text\"\r\n  },\r\n  \"code.js\": {\r\n    name: \"code.js\",\r\n    language: \"javascript\",\r\n    value: \"Enter your javascript code\"\r\n  }\r\n}\r\n\r\nfunction EditArea(id , name) {\r\n  const [fileName, setFileName] = useState(\"script.py\"); // change to \"index.html\"\r\n  const editorRef = useRef(null);\r\n  const file = files[fileName];\r\n  // files[\"script.py\"] -> file -> name, language, value -> pass those to the editor\r\n\r\n  // it will take up the full width / height of its container (width: 100%, height: 100%)\r\n  // editors of any size\r\n  // full screen, embed type size\r\n\r\n  // 1. Be able to change from 1 file to the next\r\n  // 2. Get the value of the Monaco editor\r\n\r\n  // a file path (name), a language, a default value\r\n\r\n  function handleEditorDidMount(editor, monaco) {\r\n    editorRef.current = editor;\r\n  }\r\n\r\n  async function getEditorValue (){\r\n    const formData = {\r\n      text:editorRef.current.getValue(),\r\n      lang:files[fileName].language\r\n    };\r\n    console.log(JSON.stringify(formData));\r\n    try {\r\n      const response = await fetch('http://localhost:8000/solution/checkSol', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(formData)\r\n      });\r\n\r\n      if (response.ok) {\r\n          console.log('Data sent successfully');\r\n      } else {\r\n          console.error('Failed to send data');\r\n      }\r\n  } catch (error) {\r\n      console.error('Error sending data:', error);\r\n  }\r\n    \r\n  }\r\n\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <button onClick={() => setFileName(\"script.py\")}>\r\n        Switch to python\r\n      </button>\r\n      <button onClick={() => setFileName(\"code.js\")}>\r\n        Switch to javascript\r\n      </button>\r\n      <button onClick={() => getEditorValue()}>\r\n        Get Editor Value\r\n      </button>\r\n      <Editor\r\n        height=\"80vh\"\r\n        width=\"100vh\"\r\n        theme=\"vs-dark\"\r\n        onMount={handleEditorDidMount}\r\n        path={file.name}\r\n        defaultLanguage={file.language}\r\n        defaultValue={file.value}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EditArea"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}