{"ast":null,"code":"var _jsxFileName = \"R:\\\\leetFights\\\\client\\\\src\\\\codeArea.js\",\n  _s = $RefreshSig$();\nimport { useMemo, useEffect, useState, useRef } from 'react';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Editor from \"@monaco-editor/react\";\nimport axios from 'axios';\nimport './App.css';\nimport useFuture from './futureBuilder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EditArea({\n  id,\n  name\n}) {\n  _s();\n  let files = {\n    \"script.py\": {\n      name: \"script.py\",\n      language: \"python\"\n    },\n    \"code.js\": {\n      name: \"code.js\",\n      language: \"javascript\"\n    }\n  };\n  const [fileName, setFileName] = useState(\"script.py\"); // change to \"index.html\"\n  const editorRef = useRef(null);\n  const file = files[fileName];\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch data from API\n        const response = await fetch('https://api.example.com/data');\n        const jsonData = await response.json();\n\n        // Update state with fetched data\n        setData(jsonData);\n        setLoading(false); // Set loading status to false\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setLoading(false); // Set loading status to false even if there's an error\n      }\n    };\n    fetchData(); // Call the fetchData function when component mounts\n  }, []);\n  function handleEditorDidMount(editor, monaco) {\n    editorRef.current = editor;\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n  async function getEditorValue() {\n    const formData = {\n      text: editorRef.current.getValue(),\n      lang: files[fileName].language,\n      Qid: id,\n      PName: name\n    };\n    console.log(JSON.stringify(formData));\n    try {\n      const response = await fetch('http://localhost:8000/solution/checkSol', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log('Data sent successfully');\n      } else {\n        console.error('Failed to send data');\n      }\n    } catch (error) {\n      console.error('Error sending data:', error);\n    }\n  }\n  console.log(files);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFileName(\"script.py\"),\n        children: \"Switch to python\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFileName(\"code.js\"),\n        children: \"Switch to javascript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        height: \"70vh\",\n        width: \"90vh\",\n        theme: \"vs-dark\",\n        onMount: handleEditorDidMount,\n        path: file.name,\n        defaultLanguage: file.language,\n        defaultValue: file.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getEditorValue(),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(EditArea, \"dy+fTpLPshOmesg+lDAwvhQhxHs=\");\n_c = EditArea;\nexport default EditArea;\nvar _c;\n$RefreshReg$(_c, \"EditArea\");","map":{"version":3,"names":["useMemo","useEffect","useState","useRef","BrowserRouter","Routes","Route","Editor","axios","useFuture","jsxDEV","_jsxDEV","EditArea","id","name","_s","files","language","fileName","setFileName","editorRef","file","data","setData","loading","setLoading","fetchData","response","fetch","jsonData","json","error","console","handleEditorDidMount","editor","monaco","current","children","_jsxFileName","lineNumber","columnNumber","getEditorValue","formData","text","getValue","lang","Qid","PName","log","JSON","stringify","method","headers","body","ok","className","onClick","height","width","theme","onMount","path","defaultLanguage","defaultValue","value","_c","$RefreshReg$"],"sources":["R:/leetFights/client/src/codeArea.js"],"sourcesContent":["import { useMemo,useEffect,useState, useRef } from 'react'\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport Editor from \"@monaco-editor/react\"\r\nimport axios from 'axios';\r\nimport './App.css'\r\nimport useFuture from './futureBuilder';\r\n\r\nfunction EditArea({id , name}) {\r\n\r\n  let files = {\r\n    \"script.py\": {\r\n      name: \"script.py\",\r\n      language: \"python\",\r\n     \r\n    },\r\n    \"code.js\": {\r\n      name: \"code.js\",\r\n      language: \"javascript\",\r\n    }\r\n  }\r\n\r\n  const [fileName, setFileName] = useState(\"script.py\"); // change to \"index.html\"\r\n  const editorRef = useRef(null);\r\n  const file = files[fileName];\r\n \r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch data from API\r\n        const response = await fetch('https://api.example.com/data');\r\n        const jsonData = await response.json();\r\n        \r\n        // Update state with fetched data\r\n        setData(jsonData);\r\n        setLoading(false); // Set loading status to false\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setLoading(false); // Set loading status to false even if there's an error\r\n      }\r\n    };\r\n    fetchData(); // Call the fetchData function when component mounts\r\n  }, []);\r\n    \r\n\r\n\r\n  \r\n  function handleEditorDidMount(editor, monaco) {\r\n    editorRef.current = editor;\r\n  }\r\n\r\n\r\n  \r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  async function getEditorValue (){\r\n    const formData = {\r\n      text:editorRef.current.getValue(),\r\n      lang:files[fileName].language,\r\n      Qid:id,\r\n      PName: name\r\n    };\r\n    console.log(JSON.stringify(formData));\r\n    try {\r\n      const response = await fetch('http://localhost:8000/solution/checkSol', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(formData)\r\n      });\r\n\r\n      if (response.ok) {\r\n          console.log('Data sent successfully');\r\n      } else {\r\n          console.error('Failed to send data');\r\n      }\r\n  } catch (error) {\r\n      console.error('Error sending data:', error);\r\n  }\r\n    \r\n  }\r\n\r\n    console.log(files);\r\n  return (   \r\n    <div className=\"App\">\r\n      <div>\r\n      <button onClick={() => setFileName(\"script.py\")}>\r\n        Switch to python\r\n      </button>\r\n      <button onClick={() => setFileName(\"code.js\")}>\r\n        Switch to javascript\r\n      </button>\r\n      \r\n      <Editor\r\n        height=\"70vh\"\r\n        width=\"90vh\"\r\n        theme=\"vs-dark\"\r\n        onMount={handleEditorDidMount}\r\n        path={file.name}\r\n        defaultLanguage={file.language}\r\n        defaultValue={file.value}\r\n      />\r\n      </div>\r\n      <button onClick={() => getEditorValue()}>\r\n        Submit\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EditArea"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}