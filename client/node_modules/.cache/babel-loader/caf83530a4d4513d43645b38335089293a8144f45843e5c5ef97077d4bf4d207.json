{"ast":null,"code":"var _jsxFileName = \"R:\\\\leetFights\\\\client\\\\src\\\\codeArea.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Editor from \"@monaco-editor/react\";\nimport axios from 'axios';\nimport './App.css';\nimport useFuture from './futureBuilder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet files = {\n  \"script.py\": {\n    name: \"script.py\",\n    language: \"python3\",\n    value: \"Here is some python text\"\n  },\n  \"code.js\": {\n    name: \"code.js\",\n    language: \"javascript\",\n    value: \"Enter your javascript code\"\n  }\n};\nasync function fetchData(problemName) {\n  try {\n    const response = await axios.post(`http://localhost:8000/questionSnippets/${problemName}`);\n    files['code.js'].value = response.data[6].code;\n    files['script.py'].value = response.data[3].code;\n    return true;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n;\nfunction EditArea({\n  id,\n  name\n}) {\n  _s();\n  fetchData(name);\n  const [fileName, setFileName] = useState(\"script.py\"); // change to \"index.html\"\n  const editorRef = useRef(null);\n  const file = files[fileName];\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchData(name).then(result => {\n      setData(result);\n      setLoading(false);\n    });\n  }, []);\n  function handleEditorDidMount(editor, monaco) {\n    editorRef.current = editor;\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n  async function getEditorValue() {\n    const formData = {\n      text: editorRef.current.getValue(),\n      lang: files[fileName].language,\n      Qid: id,\n      PName: name\n    };\n    console.log(JSON.stringify(formData));\n    try {\n      const response = await fetch('http://localhost:8000/solution/checkSol', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log('Data sent successfully');\n      } else {\n        console.error('Failed to send data');\n      }\n    } catch (error) {\n      console.error('Error sending data:', error);\n    }\n  }\n  console.log(files);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFileName(\"script.py\"),\n        children: \"Switch to python\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setFileName(\"code.js\"),\n        children: \"Switch to javascript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Editor, {\n        height: \"70vh\",\n        width: \"90vh\",\n        theme: \"vs-dark\",\n        onMount: handleEditorDidMount,\n        path: file.name,\n        defaultLanguage: file.language,\n        defaultValue: file.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getEditorValue(),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(EditArea, \"dy+fTpLPshOmesg+lDAwvhQhxHs=\");\n_c = EditArea;\nexport default EditArea;\nvar _c;\n$RefreshReg$(_c, \"EditArea\");","map":{"version":3,"names":["useEffect","useState","useRef","BrowserRouter","Routes","Route","Editor","axios","useFuture","jsxDEV","_jsxDEV","files","name","language","value","fetchData","problemName","response","post","data","code","error","console","EditArea","id","_s","fileName","setFileName","editorRef","file","setData","loading","setLoading","then","result","handleEditorDidMount","editor","monaco","current","children","_jsxFileName","lineNumber","columnNumber","getEditorValue","formData","text","getValue","lang","Qid","PName","log","JSON","stringify","fetch","method","headers","body","ok","className","onClick","height","width","theme","onMount","path","defaultLanguage","defaultValue","_c","$RefreshReg$"],"sources":["R:/leetFights/client/src/codeArea.js"],"sourcesContent":["import { useEffect,useState, useRef } from 'react'\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport Editor from \"@monaco-editor/react\"\r\nimport axios from 'axios';\r\nimport './App.css'\r\nimport useFuture from './futureBuilder';\r\n\r\nlet files = {\r\n  \"script.py\": {\r\n    name: \"script.py\",\r\n    language: \"python3\",\r\n    value: \"Here is some python text\"\r\n  },\r\n  \"code.js\": {\r\n    name: \"code.js\",\r\n    language: \"javascript\",\r\n    value: \"Enter your javascript code\"\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function fetchData(problemName)  {\r\n  try {\r\n\r\n      const response = await axios.post(`http://localhost:8000/questionSnippets/${problemName}`);\r\n      files['code.js'].value = response.data[6].code;\r\n      files['script.py'].value = response.data[3].code;\r\n      return true;\r\n     \r\n  } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n  }\r\n};\r\n\r\n\r\n\r\nfunction EditArea({id , name}) {\r\n  fetchData(name);\r\n  const [fileName, setFileName] = useState(\"script.py\"); // change to \"index.html\"\r\n  const editorRef = useRef(null);\r\n  const file = files[fileName];\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData(name).then(result => {\r\n      setData(result);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n\r\n  function handleEditorDidMount(editor, monaco) {\r\n    editorRef.current = editor;\r\n  }\r\n\r\n\r\n  \r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  async function getEditorValue (){\r\n    const formData = {\r\n      text:editorRef.current.getValue(),\r\n      lang:files[fileName].language,\r\n      Qid:id,\r\n      PName: name\r\n    };\r\n    console.log(JSON.stringify(formData));\r\n    try {\r\n      const response = await fetch('http://localhost:8000/solution/checkSol', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(formData)\r\n      });\r\n\r\n      if (response.ok) {\r\n          console.log('Data sent successfully');\r\n      } else {\r\n          console.error('Failed to send data');\r\n      }\r\n  } catch (error) {\r\n      console.error('Error sending data:', error);\r\n  }\r\n    \r\n  }\r\n\r\n    console.log(files);\r\n  return (   \r\n    <div className=\"App\">\r\n      <div>\r\n      <button onClick={() => setFileName(\"script.py\")}>\r\n        Switch to python\r\n      </button>\r\n      <button onClick={() => setFileName(\"code.js\")}>\r\n        Switch to javascript\r\n      </button>\r\n      \r\n      <Editor\r\n        height=\"70vh\"\r\n        width=\"90vh\"\r\n        theme=\"vs-dark\"\r\n        onMount={handleEditorDidMount}\r\n        path={file.name}\r\n        defaultLanguage={file.language}\r\n        defaultValue={file.value}\r\n      />\r\n      </div>\r\n      <button onClick={() => getEditorValue()}>\r\n        Submit\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EditArea"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}